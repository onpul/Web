- 웹 브라우저 전쟁 꼭 읽어보기
- DNS 도메인 네임 서비스 
- 한 번 갔다 온 곳은 캐시에다 넣어놓고 일단 캐시 것을 가져옴, 바뀌었는지 비교함, 다르면 다시 얻어옴
- 내가 '뉴스'를 클릭한 게 요청, 랜선을 끊어도 요청된 페이지(응답)은 그대로 --> 사이클 하나

- 구글 문서 --> 자바스크립트로 만들었음... 대박...

- html5 -> 웹표준을 총칭(CSS3, 자바스크립트를 모두 포함)

- Hype Text: 링크 / Markup: <tag> 

- 비주얼 스튜디오: 현존하는 탑.. 개발툴

- <br/>

- html 주석 <!-- -->

---------------------------------------------------------------------------

웹 컨테이너 - 웹 클라이언트가 요청하는 리소스가 적재되는 공간, 일꾼이 작업하는 공간, 클라이언트가 요구한 문서가 저장되어 있는 곳

web.xml - 배치 기술서

- 자바스크립트는 함수? 중심 언어
- 자바스크립트 안에 객체가 존재하지만, 객체 중심인 객체 지향 언어는 아님
- 무얼 담느냐에 따라 데이터 타입이 변함 -> 꺼내쓸 때 번거로움
- document : 현재 html 이 문서

**
BOM: 브라우저 오브젝트 모델 / 비오엠 객체
DOM: 도큐먼트 오브젝트 모델 / 디오엠 객체

---------------------------------------------------------------------------

margin: 바깥쪽 여백 / 장사꾼 마진
padding: 안쪽 여백 / 내 몸 안쪽 패딩

---------------------------------------------------------------------------

CSS

- 독립적인 언어다.
- 선택자의 활용이 중요.

---------------------------------------------------------------------------

아파치 '톰캣'의 웹 컨테이너로서의 역할로 도움받고 있는 것. 
우리는 지금 정적인 웹 페이지를 다루고 있다.
웹 컨테이너 안에서 유일하게 웹 클라이언트한테 줄 수 없는 게 WEB-INF임.

---------------------------------------------------------------------------

JS

- 스크립트 언어
- document는 웹 문서를 의미하는 객체. dom bom
- 자바 주석과 같음

- 변수 : 어떤 값이 저장되느냐에 따라 데이터 타입이 달라짐
- 꺼내쓸 때가 문제... 일관성있는 연산 처리가 어려움
- var 변수 이름

- 지역 변수 / 전역 변수
- 자바스크립트는 변수를 선언하지 않고도 사용할 수 있다...
b = 20;
var a = 10;

- 논리연산자 - 자바에서 쓴 거 그대로 쓴다고 생각하면 됨

- 제어문
- 조건문

- 객체 - 자바스크립트는객체를 기반으로 하는 언어
- 웹 문서 내에서 상호 작용하는 모든 요소 --> dom 처리, 활용

---------------------------------------------------------------------------

2022.04.11 웹 어플리케이션

정적인 문서
- A.html, B.html, C.html
- 문서를 이미 만들어 놔야 요청할 수 있음.

동적인 문서
- 내용물이 없고 일꾼이 있음 작업 지시를 내림. 
- 그 일꾼이 문서를 그림
- 웹 컨테이너의 영역 안에 굉장히 큰 부분을 → servlet 컨테이너
- servlet 안의 요소들 → servlet이라고 부름 / 일꾼, 일하는 방식, 공간, 문서, 결과물 등 ...
- 미리 만들어진 형태가 아님. 누가 들어왔느냐에 따라서 'ㅇㅇㅇ님 환영합니다.'처럼...
- 그러려면 일꾼에게 명령을 내릴 수 있어야겠죠? 어떻게 명령을 내리고 지시를 해야 우리가 원하는 형태로 문서를 그려줄지...

동적인 문서를 만들어 내는 걸... 자바한테 시키는 거.
자바 -> (컴파일하면)클래스 -> (어떤 규칙에 맞게 작성하면)서블릿

String title = "테스트";
	
System.out.println("<html>");
System.out.println("<head>");
System.out.println("<title>");

if (title.equals("테스트")
{
    System.out.println("<body>");
    System.out.println("</body>");
}

System.out.println("</title>");
System.out.println("</head>");
System.out.println("</html>");

중요한 건, 자바의 출력 스트림 안에 내용을 다 넣어줘야 한다는 거.
그래서 JSP 문법이 나옴.

Servlet을 대체하려고 JSP가 나온 게 아님.
온전하게 분리되어 만들어 진 아이가 아님.

html 문서만 그리는 게 더 편한데, 구태여 자바 코드 안에 그리려니까 너무 힘들어서
그리는 걸, 옆에 한 명을 더 두는 것.

Servlet -> 빈 문서에 한땀한땀 그리게 하는 것.
JSP -> 

사단장이... 군단장한테... 문서를 작성해서 보고하려고 함. 
그 문서를 누가 썼을까? -> 더 낮은 계급의 병사...
템플릿 제공... 초안 작성 원활
더 원활하게 하기 위해 약속도 할 수 있을 것. (점은 그림 파란 점은 도표!)
--> 이게 JSP

서블릿이라는 공간에서 서블릿이 일을 하는 건 JSP에서도 똑같음. 
서블릿과 JSP는 뗄레야 뗄 수가 없음.

사실 JSP 컨테이너라는 건 없음. 그것도 서블릿.

결론...
서블릿도 JSP도 둘다 모두 동적인 웹 페이지를 생성하는 기술이다.
동적인 웹 페이지를 생성한다는 건, 사용자마다 똑같은 페이지를 요청해도 다른 결과를 주는 것을 말한다.
어떤 요청이 들어왔냐에 따라 다른 결과를 주는 것.
그래서 둘다 웹 기반의 어플리케이션(요청에 대한 응답 수행) 
servlet -> 자바로 html 만드는 것
이를 기반으로 JSP 등장... 사단장이 좀 더 편하다.

MVC 디자인 패턴 / V = view
모델 뷰 컨트롤러
모델은 자바...
컨트롤은 서블릿이 편하네~...

---------------------------------------------------------------------------

xml...... 뭔지 검색해 보자



1. 최초 요청 → 구동 → init() 메소드 호출 // 한 번만.

2. 요청이 있을 때마다 (페이지 요청 or 새로고침 등) → service() 메소드 호출 // 매번.
   - GET : doGet() 메소드 호출
   - POST : doPost() 메소드 호출

3. 서비스 종료 → destroy() 메소드 호출 // 한 번만.

---------------------------------------------------------------------------

20220412

cookie : 헬스장 갈 때 드는 가방 / 헬스장에 안 가도 쓸 수 있다.
session : 헬스장에 있는 캐비넷 / 헬스장에 가야 쓸 수 있다.

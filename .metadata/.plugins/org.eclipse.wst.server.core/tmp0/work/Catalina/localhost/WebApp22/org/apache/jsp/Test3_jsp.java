/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.54
 * Generated at: 2022-04-29 01:18:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Test3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/standard.jar", Long.valueOf(1651154835779L));
    _jspx_dependants.put("jar:file:/C:/WebStudy/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/WebApp22/WEB-INF/lib/standard.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	request.setCharacterEncoding("UTF-8");
	String cp = request.getContextPath();

      out.write('\r');
      out.write('\n');


	request.setAttribute("result", "EL 테스트");


      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Test3.jsp</title>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"css/main.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("\t<h1>EL 관련 실습</h1>\r\n");
      out.write("\t<hr />\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("\t<!-- action 속성 생략 → su1 과 su2 데이터를 전송하며 요청하는 페이지는 자기 자신~!!! -->\r\n");
      out.write("\t<form method=\"post\">\r\n");
      out.write("\t\t정수1 <input type=\"text\" name=\"su1\" class=\"txt\"/><br>\r\n");
      out.write("\t\t정수2 <input type=\"text\" name=\"su2\" class=\"txt\"/><br>\r\n");
      out.write("\t\t<button type=\"submit\" class=\"btn\">결과 확인</button>\r\n");
      out.write("\t</form>\r\n");
      out.write("</div><hr>\r\n");
      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("\t<h2>폼 데이터 수신</h2>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 폼의 데이터를 수신하는 방법 1 -->\r\n");
      out.write("\t<h3>");
      out.print(request.getParameter("su1") );
      out.write("</h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 폼의 데이터를 수신하는 방법 2 -->\r\n");
      out.write("\t<h3>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.su1 }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h3>\r\n");
      out.write("\t<!-- EL 문법 관찰 -->\r\n");
      out.write("\t<!-- 제이쿼리 문법과 혼동될 수 있으니 잘 기억해 두자. -->\r\n");
      out.write("\t<!-- 내부에 있는 파라미터 중에 su1 -->\r\n");
      out.write("\t<!-- null에 대해 관대하다. null값이 보이지 않는다.(클라이언트에게 좋음) -->\r\n");
      out.write("</div>\r\n");
      out.write("<br><br><hr>\r\n");
      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("\t<h2>폼의 데이터를 받아 연산 수행</h2>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 폼의 데이터를 받아 연산을 수행하는 방법 1 -->\r\n");
      out.write("\t");

		String s1 = request.getParameter("su1");
		String s2 = request.getParameter("su2");
		
		int s = 0;
		
		if (s1!=null && s2!=null)
		{
			s = Integer.parseInt(s1) + Integer.parseInt(s2);
		}
	
      out.write("\r\n");
      out.write("\t<h3>합 : ");
      out.print(s );
      out.write("</h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 폼의 데이터를 받아 연산을 수행하는 방법 2 --> <!-- EL 문법 사용! -->\r\n");
      out.write("\t<h3> 합 : ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.su1 + param.su2 }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h3>\r\n");
      out.write("\t<!-- → 파라미터 수신도 알아서... -->\r\n");
      out.write("\t<!-- → 필요한 캐스팅도 알아서 자동으로 수행 -->\r\n");
      out.write("\t<!-- → null 을 대하는 방식 유연함 check~!!! -->\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 최초 페이지 요청에서는 null인 상태, submit 수행 후에는 입력하지 않으면 빈 문자열이 입력된 것 -->\r\n");
      out.write("\t\r\n");
      out.write("</div>\r\n");
      out.write("<br><br><hr>\r\n");
      out.write("\r\n");
      out.write("<div>\r\n");
      out.write("\t<h2>setAttribute() 로 넘긴 데이터 수신</h2>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- setAttribute()로 넘긴 데이터를 수신하는 방법1 -->\r\n");
      out.write("\t<h3>");
      out.print(request.getAttribute("result") );
      out.write("</h3>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- setAttribute()로 넘긴 데이터를 수신하는 방법2 -->\r\n");
      out.write("\t<h3>");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${result }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</h3>\r\n");
      out.write("\t\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
